/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : SSI1.h
**     Project     : TabataTimer4_2
**     Processor   : MKL26Z128VFT4
**     Component   : SSI_LDD
**     Version     : Component 01.173, Driver 01.02, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2014-10-29, 09:04, # CodeGen: 0
**     Abstract    :
**         This component "SSI_LDD" implements SLAVE part of synchronous
**         serial master-slave communication.
**     Settings    :
**          Component name                                 : SSI1
**          Device                                         : I2S0
**          Interrupt service/event                        : Enabled
**            Input interrupt                              : INT_I2S0
**            Input interrupt priority                     : medium priority
**            Output interrupt                             : INT_I2S0
**            Output interrupt priority                    : medium priority
**          Settings                                       : 
**            Mode                                         : I2S slave
**            Synchronous mode                             : Enabled
**            Gated clock mode                             : Disabled
**            Network mode                                 : Disabled
**            Two channel multiplexing                     : Disabled
**            AC97 settings                                : Disabled
**            Receiver                                     : Disabled
**            Transmitter                                  : Enabled
**              Sync to frame signal                       : Enabled
**              Width                                      : 16 bits
**              Bit 0                                      : LSB aligned
**              Data type                                  : signed 16 bits
**              Shift clock edge                           : Rising
**              Frame-sync/clock                           : Enabled
**              MSB first                                  : yes
**              Frame rate                                 : 2
**              Transmit slot mask                         : 11111111111111111111111111111111
**              HW output buffer size                      : Max buffer size
**              HW output watermark                        : 1
**              Stop in Stop mode                          : no
**              Stop in Debug mode                         : no
**              DMA                                        : Enabled
**                Version                                  : New
**                  DMA channel                            : DMAChannel_LDD
**            Master clock                                 : Output pin
**              Pin                                        : PTC4/LLWU_P8/SPI0_PCS0/UART1_TX/TPM0_CH3/I2S0_MCLK
**              Pin signal                                 : 
**              Clock rate                                 : 20.97152 MHz
**            Receive data                                 : Disabled
**            Transmit data                                : Enabled
**              Pin                                        : ADC0_SE15/TSI0_CH14/PTC1/LLWU_P6/RTC_CLKIN/I2C1_SCL/TPM0_CH0/I2S0_TXD0
**              Pin signal                                 : 
**            Receive clock                                : Disabled
**            Transmit clock                               : Enabled
**              Pin                                        : PTC3/LLWU_P7/UART1_RX/TPM0_CH2/CLKOUT/I2S0_TX_BCLK
**              Pin signal                                 : 
**              Clock idle state                           : 0
**              Direction                                  : Input
**            Receive frame sync                           : Disabled
**            Transmit frame sync                          : Enabled
**              Pin                                        : ADC0_SE11/TSI0_CH15/PTC2/I2C1_SDA/TPM0_CH1/I2S0_TX_FS
**              Pin signal                                 : 
**              Direction                                  : Input
**              Active state                               : Low
**              Frame sync length                          : one-bit
**              Frame sync initiated                       : one bit before the data
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnBlockSent                                : Enabled
**              OnBlockSent1                               : Disabled
**              OnBlockReceived                            : Disabled
**              OnBlockReceived1                           : Disabled
**              OnError                                    : Enabled
**              OnReceiveFrameSync                         : Disabled
**              OnTransmitFrameSync                        : Disabled
**              OnReceiveLastSlot                          : Disabled
**              OnTransmitLastSlot                         : Disabled
**              OnReceiveComplete                          : Disabled
**              OnTransmitComplete                         : Disabled
**              OnAC97TagUpdated                           : Disabled
**              OnAC97CommandAddressUpdated                : Disabled
**              OnAC97CommandDataUpdated                   : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init            - LDD_TDeviceData* SSI1_Init(LDD_TUserData *UserDataPtr);
**         Deinit          - void SSI1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         EnableTransfer  - LDD_TError SSI1_EnableTransfer(LDD_TDeviceData *DeviceDataPtr,...
**         DisableTransfer - LDD_TError SSI1_DisableTransfer(LDD_TDeviceData *DeviceDataPtr,...
**         SendBlock       - LDD_TError SSI1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData...
**         GetSentDataNum  - uint16_t SSI1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);
**         GetError        - LDD_TError SSI1_GetError(LDD_TDeviceData *DeviceDataPtr, LDD_SSI_TError...
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file SSI1.h
** @version 01.02
** @brief
**         This component "SSI_LDD" implements SLAVE part of synchronous
**         serial master-slave communication.
*/         
/*!
**  @addtogroup SSI1_module SSI1 module documentation
**  @{
*/         

#ifndef __SSI1_H
#define __SSI1_H

/* MODULE SSI1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "SSI1_TxDMA.h"

#include "Cpu.h"
#include "SAI_PDD.h"


typedef int16_t SSI1_TTxData;          /* Tx data type */

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define SSI1_PRPH_BASE_ADDRESS  0x4002F000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define SSI1_Init_METHOD_ENABLED       /*!< Init method of the component SSI1 is enabled (generated) */
#define SSI1_Deinit_METHOD_ENABLED     /*!< Deinit method of the component SSI1 is enabled (generated) */
#define SSI1_EnableTransfer_METHOD_ENABLED /*!< EnableTransfer method of the component SSI1 is enabled (generated) */
#define SSI1_DisableTransfer_METHOD_ENABLED /*!< DisableTransfer method of the component SSI1 is enabled (generated) */
#define SSI1_SendBlock_METHOD_ENABLED  /*!< SendBlock method of the component SSI1 is enabled (generated) */
#define SSI1_GetSentDataNum_METHOD_ENABLED /*!< GetSentDataNum method of the component SSI1 is enabled (generated) */
#define SSI1_GetError_METHOD_ENABLED   /*!< GetError method of the component SSI1 is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define SSI1_OnBlockSent_EVENT_ENABLED /*!< OnBlockSent event of the component SSI1 is enabled (generated) */
#define SSI1_OnError_EVENT_ENABLED     /*!< OnError event of the component SSI1 is enabled (generated) */


/* Communication error data type */


/*
** ===================================================================
**     Method      :  SSI1_Init (component SSI_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc.
**         If the "Enable in init. code" is set to "yes" value then the
**         device is also enabled(see the description of the Enable()
**         method). In this case the Enable() method is not necessary
**         and needn't to be generated. 
**         This method can be called only once. Before the second call
**         of Init() the Deinit() must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Device data structure pointer.
*/
/* ===================================================================*/
LDD_TDeviceData* SSI1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  SSI1_Deinit (component SSI_LDD)
*/
/*!
**     @brief
**         This method deinitializes the device. It switches off the
**         device, frees the device data structure memory, interrupts
**         vectors, etc.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
*/
/* ===================================================================*/
void SSI1_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SSI1_EnableTransfer (component SSI_LDD)
*/
/*!
**     @brief
**         This method enables data transfer. Before first call use the
**         <SendBlock> method to prepare data for sending or/and
**         <ReceiveBlock> method to prepare space for received data.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         SectionMask     - Section mask. Following
**                           status masks defined in PE_Types.h:
**                           LDD_SSI_RECEIVER - Receive section of the
**                           device.
**                           LDD_SSI_TRANSMITTER - Transmit section of
**                           the device.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_PARAM_MASK - Invalid section mask
**                           parameter
*/
/* ===================================================================*/
LDD_TError SSI1_EnableTransfer(LDD_TDeviceData *DeviceDataPtr, LDD_SSI_TSectionMask SectionMask);

/*
** ===================================================================
**     Method      :  SSI1_DisableTransfer (component SSI_LDD)
*/
/*!
**     @brief
**         This method disables data transfer.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         SectionMask     - Section mask. The
**                           component event masks are defined in the
**                           PE_Types.h file.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - The device doesn't work in the
**                           active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_PARAM_MASK - Invalid section mask
**                           parameter
*/
/* ===================================================================*/
LDD_TError SSI1_DisableTransfer(LDD_TDeviceData *DeviceDataPtr, LDD_SSI_TSectionMask SectionMask);

/*
** ===================================================================
**     Method      :  SSI1_SendBlock (component SSI_LDD)
*/
/*!
**     @brief
**         This method sends a block of characters. The method returns
**         ERR_BUSY when the previous block transmission is not
**         completed. This method should be called before the first
**         call of the <EnableTransfer> method with LDD_SSI_TRANSMITTER
**         used in the second parameter, for more info please see the
**         <Typical Usage> page in help. The method
**         <CancelBlockTransmission> can be used to cancel a transmit
**         operation.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         BufferPtr       - Pointer to the block of data
**                           to send.
**     @param
**         Size            - Size of the data block.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
**                           ERR_BUSY - The previous transmit request is
**                           pending
**                           ERR_PARAM_SIZE - Size of the data block is
**                           out of range
*/
/* ===================================================================*/
LDD_TError SSI1_SendBlock(LDD_TDeviceData *DeviceDataPtr, LDD_TData *BufferPtr, uint16_t Size);

/*
** ===================================================================
**     Method      :  SSI1_GetSentDataNum (component SSI_LDD)
*/
/*!
**     @brief
**         Returns the number of sent characters. This method is
**         available only if method SendBlock is enabled.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @return
**                         - The number of characters in the output
**                           buffer.
*/
/* ===================================================================*/
uint16_t SSI1_GetSentDataNum(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  SSI1_GetError (component SSI_LDD)
*/
/*!
**     @brief
**         This method return a set of asserted flags. The flags are
**         accumulated in the set. After calling this method the set is
**         returned and cleared.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by <Init> method.
**     @param
**         ErrorPtr        - A pointer to the returned set of
**                           error flags:
**                           LDD_SSI_RX_OVERFLOW - Receiver overflow
**                           LDD_SSI_RX_OVERFLOW_1 - Receiver overflow 1
**                           (only if HW has second channel)
**                           LDD_SSI_TX_UNDERFLOW - Transmitter
**                           underflow
**                           LDD_SSI_TX_UNDERFLOW_1 - Transmitter
**                           underflow 1 (only if HW has second channel)
**     @return
**                         - Error code (if GetError did not succeed),
**                           possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
**                           ERR_DISABLED - Component is disabled
*/
/* ===================================================================*/
LDD_TError SSI1_GetError(LDD_TDeviceData *DeviceDataPtr, LDD_SSI_TError *ErrorPtr);

/*
** ===================================================================
**     Method      :  SSI1_RxTxInterrupt (component SSI_LDD)
**
**     Description :
**         The ISR function handling the device receive/transmit 
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {FreeRTOS RTOS Adapter} ISR function prototype */
PE_ISR(SSI1_RxTxInterrupt);

void SSI1_TxDMA_OnComplete(LDD_TUserData *UserDataPtr);

void SSI1_TxDMA_OnError(LDD_TUserData *UserDataPtr);

/* END SSI1. */

#endif
/* ifndef __SSI1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
