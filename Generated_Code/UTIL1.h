/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : UTIL1.h
**     Project     : TabataTimer4_2
**     Processor   : MKL26Z128VFT4
**     Component   : Utility
**     Version     : Component 01.095, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2014-10-29, 09:04, # CodeGen: 0
**     Abstract    :
**          Contains various utility functions.
**     Settings    :
**          Component name                                 : UTIL1
**     Contents    :
**         strcpy                  - void UTIL1_strcpy(byte *dst, size_t dstSize, const unsigned char *src);
**         strcat                  - void UTIL1_strcat(byte *dst, size_t dstSize, const unsigned char *src);
**         chcat                   - void UTIL1_chcat(byte *dst, size_t dstSize, byte ch);
**         Num8sToStr              - void UTIL1_Num8sToStr(byte *dst, size_t dstSize, signed char val);
**         Num8uToStr              - void UTIL1_Num8uToStr(byte *dst, size_t dstSize, byte val);
**         Num16sToStr             - void UTIL1_Num16sToStr(byte *dst, size_t dstSize, int16_t val);
**         Num16uToStr             - void UTIL1_Num16uToStr(byte *dst, size_t dstSize, word val);
**         Num32uToStr             - void UTIL1_Num32uToStr(byte *dst, size_t dstSize, dword val);
**         Num32sToStr             - void UTIL1_Num32sToStr(byte *dst, size_t dstSize, long val);
**         Num16sToStrFormatted    - void UTIL1_Num16sToStrFormatted(byte *dst, size_t dstSize, int16_t val, char...
**         Num16uToStrFormatted    - void UTIL1_Num16uToStrFormatted(byte *dst, size_t dstSize, word val, char...
**         Num32uToStrFormatted    - void UTIL1_Num32uToStrFormatted(byte *dst, size_t dstSize, dword val, char...
**         Num32sToStrFormatted    - void UTIL1_Num32sToStrFormatted(byte *dst, size_t dstSize, long val, char...
**         strcatNum8u             - void UTIL1_strcatNum8u(byte *dst, size_t dstSize, byte val);
**         strcatNum8s             - void UTIL1_strcatNum8s(byte *dst, size_t dstSize, signed char val);
**         strcatNum16u            - void UTIL1_strcatNum16u(byte *dst, size_t dstSize, word val);
**         strcatNum16s            - void UTIL1_strcatNum16s(byte *dst, size_t dstSize, int16_t val);
**         strcatNum32u            - void UTIL1_strcatNum32u(byte *dst, size_t dstSize, dword val);
**         strcatNum32s            - void UTIL1_strcatNum32s(byte *dst, size_t dstSize, long val);
**         strcatNum16uFormatted   - void UTIL1_strcatNum16uFormatted(byte *dst, size_t dstSize, word val, char...
**         strcatNum16sFormatted   - void UTIL1_strcatNum16sFormatted(byte *dst, size_t dstSize, int16_t val, char...
**         strcatNum32uFormatted   - void UTIL1_strcatNum32uFormatted(byte *dst, size_t dstSize, dword val, char...
**         strcatNum32sFormatted   - void UTIL1_strcatNum32sFormatted(byte *dst, size_t dstSize, long val, char...
**         strcatNum8Hex           - void UTIL1_strcatNum8Hex(byte *dst, size_t dstSize, byte num);
**         strcatNum16Hex          - void UTIL1_strcatNum16Hex(byte *dst, size_t dstSize, word num);
**         strcatNum24Hex          - void UTIL1_strcatNum24Hex(byte *dst, size_t dstSize, dword num);
**         strcatNum32Hex          - void UTIL1_strcatNum32Hex(byte *dst, size_t dstSize, dword num);
**         strcatNum32sDotValue100 - void UTIL1_strcatNum32sDotValue100(byte *dst, size_t dstSize, long num);
**         IsLeapYear              - bool UTIL1_IsLeapYear(word year);
**         WeekDay                 - byte UTIL1_WeekDay(word year, byte month, byte day);
**         ReadEscapedName         - byte UTIL1_ReadEscapedName(const unsigned char *filename, byte *destname,...
**         xatoi                   - byte UTIL1_xatoi(const unsigned char **str, int32_t *res);
**         ScanDate                - byte UTIL1_ScanDate(const unsigned char **str, byte *day, byte *month, word...
**         ScanTime                - byte UTIL1_ScanTime(const unsigned char **str, byte *hour, byte *minute, byte...
**         ScanDecimal8uNumber     - byte UTIL1_ScanDecimal8uNumber(const unsigned char **str, byte *val);
**         ScanDecimal8sNumber     - byte UTIL1_ScanDecimal8sNumber(const unsigned char **str, signed char *val);
**         ScanDecimal16uNumber    - byte UTIL1_ScanDecimal16uNumber(const unsigned char **str, word *val);
**         ScanDecimal16sNumber    - byte UTIL1_ScanDecimal16sNumber(const unsigned char **str, int16_t *val);
**         ScanDecimal32uNumber    - byte UTIL1_ScanDecimal32uNumber(const unsigned char **str, uint32_t *val);
**         ScanDecimal32sNumber    - byte UTIL1_ScanDecimal32sNumber(const unsigned char **str, uint32_t *val);
**         ScanHex8uNumber         - byte UTIL1_ScanHex8uNumber(const unsigned char **str, byte *val);
**         ScanHex8uNumberNoPrefix - byte UTIL1_ScanHex8uNumberNoPrefix(const unsigned char **str, byte *val);
**         ScanHex16uNumber        - byte UTIL1_ScanHex16uNumber(const unsigned char **str, word *val);
**         ScanHex32uNumber        - byte UTIL1_ScanHex32uNumber(const unsigned char **str, uint32_t *val);
**         strcmp                  - int16_t UTIL1_strcmp(const char *, const char *);
**         strncmp                 - int16_t UTIL1_strncmp(const char *, const char *, size_t size);
**         strFind                 - int16_t UTIL1_strFind(byte *str, byte *subStr);
**         strtailcmp              - byte UTIL1_strtailcmp(byte *str, byte *tail);
**         strlen                  - word UTIL1_strlen(const char *);
**         strCutTail              - byte UTIL1_strCutTail(byte *str, byte *tail);
**
**     License   :  Open Source (LGPL)
**     Copyright : (c) Copyright Erich Styger, 2014, all rights reserved.
**     xatoi(): Copyright (C) 2010, ChaN, all right reserved. (see copyright notice and license at the function implementation).
**     This an open source software implementing utility functions using Processor Expert.
**     This is a free software and is opened for education,  research and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for
**       personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/
/*!
** @file UTIL1.h
** @version 01.00
** @brief
**          Contains various utility functions.
*/         
/*!
**  @addtogroup UTIL1_module UTIL1 module documentation
**  @{
*/         

#ifndef __UTIL1_H
#define __UTIL1_H

/* MODULE UTIL1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "Cpu.h"
#include <string.h>
#include <stddef.h> /* for size_t */

#include <stddef.h>


void UTIL1_strcpy(byte *dst, size_t dstSize, const unsigned char *src);
/*
** ===================================================================
**     Method      :  UTIL1_strcpy (component Utility)
**     Description :
**         Same as normal strcpy, but safe as it does not write beyond
**         the buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**       * src             - Pointer to source string.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcat(byte *dst, size_t dstSize, const unsigned char *src);
/*
** ===================================================================
**     Method      :  UTIL1_strcat (component Utility)
**     Description :
**         Same as normal strcat, but safe as it does not write beyond
**         the buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**       * src             - Pointer to source string.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_Num16sToStr(byte *dst, size_t dstSize, int16_t val);
/*
** ===================================================================
**     Method      :  UTIL1_Num16sToStr (component Utility)
**     Description :
**         Converts a signed 16bit value into a string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to be converted.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_Num16sToStrFormatted(byte *dst, size_t dstSize, int16_t val, char fill, byte nofFill);
/*
** ===================================================================
**     Method      :  UTIL1_Num16sToStrFormatted (component Utility)
**     Description :
**         Converts a 16bit signed value to string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**         fill            - Fill character
**         nofFill         - Number of fill characters
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum16s(byte *dst, size_t dstSize, int16_t val);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum16s (component Utility)
**     Description :
**         Appends a 16bit signed value to a string buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum16sFormatted(byte *dst, size_t dstSize, int16_t val, char fill, byte nofFill);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum16sFormatted (component Utility)
**     Description :
**         Appends a 16bit signed value to a string buffer in a
**         formatted way.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**         fill            - Fill character
**         nofFill         - Number of fill characters
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum8Hex(byte *dst, size_t dstSize, byte num);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum8Hex (component Utility)
**     Description :
**         Appends a 8bit unsigned value to a buffer as hex number
**         (without a 0x prefix).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         num             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum16Hex(byte *dst, size_t dstSize, word num);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum16Hex (component Utility)
**     Description :
**         Appends a 16bit unsigned value to a buffer as hex number
**         (without a 0x prefix).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         num             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum32s(byte *dst, size_t dstSize, long val);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum32s (component Utility)
**     Description :
**         Appends a 32bit signed value to a string buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_Num32sToStr(byte *dst, size_t dstSize, long val);
/*
** ===================================================================
**     Method      :  UTIL1_Num32sToStr (component Utility)
**     Description :
**         Converts a signed 32bit value into a string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to be converted.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum32Hex(byte *dst, size_t dstSize, dword num);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum32Hex (component Utility)
**     Description :
**         Appends a 16bit unsigned value to a buffer as hex number
**         (without a 0x prefix).
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         num             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

bool UTIL1_IsLeapYear(word year);
/*
** ===================================================================
**     Method      :  UTIL1_IsLeapYear (component Utility)
**     Description :
**         Returns true if a given year is a leap year
**     Parameters  :
**         NAME            - DESCRIPTION
**         year            - Year, in the YYYY format.
**     Returns     :
**         ---             - If the year is a leap year or not.
** ===================================================================
*/

byte UTIL1_WeekDay(word year, byte month, byte day);
/*
** ===================================================================
**     Method      :  UTIL1_WeekDay (component Utility)
**     Description :
**         Returns the weekday for a given date >= 1.Jan.1900
**     Parameters  :
**         NAME            - DESCRIPTION
**         year            - year in YYYY format
**         month           - month of the year (1: January, 2:
**                           February, etc)
**         day             - day of the moth (starting with 1)
**     Returns     :
**         ---             - Returns the weekday, 0 for Sunday, 1 for
**                           Monday, 2 for Tuesday, etc.
** ===================================================================
*/

void UTIL1_chcat(byte *dst, size_t dstSize, byte ch);
/*
** ===================================================================
**     Method      :  UTIL1_chcat (component Utility)
**     Description :
**         Adds a single character to a zero byte terminated buffer. It
**         cares about buffer overflow.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         ch              - character to append
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum32u(byte *dst, size_t dstSize, dword val);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum32u (component Utility)
**     Description :
**         Appends a 32bit signed value to a string buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_Num32uToStr(byte *dst, size_t dstSize, dword val);
/*
** ===================================================================
**     Method      :  UTIL1_Num32uToStr (component Utility)
**     Description :
**         Converts an unsigned 32bit value into a string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to be converted.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum32uFormatted(byte *dst, size_t dstSize, dword val, char fill, byte nofFill);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum32uFormatted (component Utility)
**     Description :
**         Appends a 32bit unsigned value to a string buffer in a
**         formatted way.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**         fill            - Fill character
**         nofFill         - Number of fill characters
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_Num32uToStrFormatted(byte *dst, size_t dstSize, dword val, char fill, byte nofFill);
/*
** ===================================================================
**     Method      :  UTIL1_Num32uToStrFormatted (component Utility)
**     Description :
**         Converts a 32bit unsigned value to string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**         fill            - Fill character
**         nofFill         - Number of fill characters
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum24Hex(byte *dst, size_t dstSize, dword num);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum24Hex (component Utility)
**     Description :
**         Appends a 32bit unsigned value to a buffer as hex number
**         (without a 0x prefix). Only 24bits are used.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         num             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

byte UTIL1_ReadEscapedName(const unsigned char *filename, byte *destname, size_t maxlen, size_t *lenRead, size_t *lenWritten, const char *terminators);
/*
** ===================================================================
**     Method      :  UTIL1_ReadEscapedName (component Utility)
**     Description :
**         Scans an escaped name from a string. This is useful e.g. for
**         double quoted file names.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * filename        - the name to be copied. Names may
**                           be in quoted format
**       * destname        - the destination of the copy.
**                           Names are not in quoted format. destname
**                           may be NULL to get the other return values
**                           only
**         maxlen          - length allocated for destname
**       * lenRead         - length read in filename to copy
**                           the whole name. Note that filenames maybe
**                           space terminated, so *lenRead <
**                           strlen(filename)
**         lenWritten      - the size written in destname.
**                           In case of overflows in destname,
**                           lenWritten is still increased but destname
**                           no longer written. The have the string
**                           length in these cases use strlen(destname)
**         terminators     - additional characters
**                           where a name should terminate. May be NULL
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_xatoi(const unsigned char **str, int32_t *res);
/*
** ===================================================================
**     Method      :  UTIL1_xatoi (component Utility)
**     Description :
**         Custom atoi() (ascii to int) implementation by Elm Chan
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to string to scan. Returns until
**                           where it has scanned.
**       * res             - Pointer to where to store the result
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_ScanDate(const unsigned char **str, byte *day, byte *month, word *year);
/*
** ===================================================================
**     Method      :  UTIL1_ScanDate (component Utility)
**     Description :
**         Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For
**         yy it will expand it to 20yy.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to the string to be scanned. The
**                           function advances the pointer.
**       * day             - Pointer to where to store the day value
**       * month           - Pointer to where to store the month
**                           value
**       * year            - Pointer to where to store the year value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_ScanTime(const unsigned char **str, byte *hour, byte *minute, byte *second, byte *hSecond);
/*
** ===================================================================
**     Method      :  UTIL1_ScanTime (component Utility)
**     Description :
**         Scans a time string in the format "hh:mm:ss,hh" with the
**         part for the ",hh" is optional.
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - Pointer to the string to be scanned. The
**                           function advances the pointer.
**       * hour            - Pointer to where to store the hour value
**       * minute          - Pointer to where to store the minute
**                           value
**       * second          - Pointer to where to store the second
**                           value
**       * hSecond         - Pointer to scans the hundreds of
**                           second part. If not present in string, zero
**                           is stored
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_ScanDecimal16uNumber(const unsigned char **str, word *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanDecimal16uNumber (component Utility)
**     Description :
**         Scans a decimal 16bit unsigned number
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - String to scan. It returns as well until
**                           where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_ScanDecimal8uNumber(const unsigned char **str, byte *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanDecimal8uNumber (component Utility)
**     Description :
**         Scans a decimal 8bit unsigned number
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - String to scan. It returns as well until
**                           where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void UTIL1_Num16uToStr(byte *dst, size_t dstSize, word val);
/*
** ===================================================================
**     Method      :  UTIL1_Num16uToStr (component Utility)
**     Description :
**         Converts a signed 16bit value into a string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to be converted.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_Num8sToStr(byte *dst, size_t dstSize, signed char val);
/*
** ===================================================================
**     Method      :  UTIL1_Num8sToStr (component Utility)
**     Description :
**         Converts a signed 8bit value into a string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to be converted.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_Num8uToStr(byte *dst, size_t dstSize, byte val);
/*
** ===================================================================
**     Method      :  UTIL1_Num8uToStr (component Utility)
**     Description :
**         Converts an unsigned 8bit value into a string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to be converted.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_Num16uToStrFormatted(byte *dst, size_t dstSize, word val, char fill, byte nofFill);
/*
** ===================================================================
**     Method      :  UTIL1_Num16uToStrFormatted (component Utility)
**     Description :
**         Converts a 16bit unsigned value to string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**         fill            - Fill character
**         nofFill         - Number of fill characters
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_Num32sToStrFormatted(byte *dst, size_t dstSize, long val, char fill, byte nofFill);
/*
** ===================================================================
**     Method      :  UTIL1_Num32sToStrFormatted (component Utility)
**     Description :
**         Converts a 32bit signed value to string.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**         fill            - Fill character
**         nofFill         - Number of fill characters
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum16u(byte *dst, size_t dstSize, word val);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum16u (component Utility)
**     Description :
**         Appends a 16bit unsigned value to a string buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum16uFormatted(byte *dst, size_t dstSize, word val, char fill, byte nofFill);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum16uFormatted (component Utility)
**     Description :
**         Appends a 16bit unsigned value to a string buffer in a
**         formatted way.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**         fill            - Fill character
**         nofFill         - Number of fill characters
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum32sFormatted(byte *dst, size_t dstSize, long val, char fill, byte nofFill);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum32sFormatted (component Utility)
**     Description :
**         Appends a 32bit signed value to a string buffer in a
**         formatted way.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**         fill            - Fill character
**         nofFill         - Number of fill characters
**     Returns     : Nothing
** ===================================================================
*/

byte UTIL1_ScanDecimal32uNumber(const unsigned char **str, uint32_t *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanDecimal32uNumber (component Utility)
**     Description :
**         Scans a decimal 32bit unsigned number
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - string to scan. It returns as well until
**                           where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void UTIL1_strcatNum8u(byte *dst, size_t dstSize, byte val);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum8u (component Utility)
**     Description :
**         Appends a 8bit unsigned value to a string buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

void UTIL1_strcatNum8s(byte *dst, size_t dstSize, signed char val);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum8s (component Utility)
**     Description :
**         Appends a 8bit signed value to a string buffer.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         val             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

#define UTIL1_strcmp(str1, str2) \
  strcmp(str1, str2)

/*
** ===================================================================
**     Method      :  UTIL1_strcmp (component Utility)
**     Description :
**         Wrapper to the standard strcmp() routine
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str1            - Pointer to string
**       * str2            - Pointer to string
**     Returns     :
**         ---             - Returns zero if the two strings are the
**                           same
** ===================================================================
*/

#define UTIL1_strncmp(str1, str2, size) \
  strncmp(str1, str2, size)

/*
** ===================================================================
**     Method      :  UTIL1_strncmp (component Utility)
**     Description :
**         Wrapper to the standard strncmp() routine
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str1            - Pointer to string
**       * str2            - Pointer to string
**         size            - 
**     Returns     :
**         ---             - Returns zero if the two strings are the
**                           same
** ===================================================================
*/

#define UTIL1_strlen(str) \
  strlen(str)

/*
** ===================================================================
**     Method      :  UTIL1_strlen (component Utility)
**     Description :
**         Wrapper to the standard strlen() function.
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - 
**     Returns     :
**         ---             - size of strinig
** ===================================================================
*/

byte UTIL1_ScanHex32uNumber(const unsigned char **str, uint32_t *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanHex32uNumber (component Utility)
**     Description :
**         Scans a hexadecimal 32bit number, starting with 0x
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - String to scan, starting with 0x. It
**                           returns as well until where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_ScanHex16uNumber(const unsigned char **str, word *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanHex16uNumber (component Utility)
**     Description :
**         Scans a hexadecimal 16bit number, starting with 0x
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - String to scan, starting with 0x.. It
**                           returns as well until where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_ScanHex8uNumber(const unsigned char **str, byte *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanHex8uNumber (component Utility)
**     Description :
**         Scans a hexadecimal 8bit number, starting with 0x
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - String to scan, starting with 0x. It
**                           returns as well until where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_strtailcmp(byte *str, byte *tail);
/*
** ===================================================================
**     Method      :  UTIL1_strtailcmp (component Utility)
**     Description :
**         Compares the tail of a string and returns 0 if it matches, 1
**         otherwise
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to string. This string is compared
**                           if it contains the tail.
**       * tail            - Pointer to tail string.
**     Returns     :
**         ---             - returns 0 if tail matches, -1 otherwise
** ===================================================================
*/

byte UTIL1_strCutTail(byte *str, byte *tail);
/*
** ===================================================================
**     Method      :  UTIL1_strCutTail (component Utility)
**     Description :
**         Removes a tailing substring from a string. The string passed
**         will be modified (the tail is cut by writing a zero byte to
**         the string!)
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to string where to remove the tail
**       * tail            - Pointer to substring to remove
**     Returns     :
**         ---             - Error code, ERR_OK if no error, otherwise
**                           ERR_FAIL if tail is not found
** ===================================================================
*/

byte UTIL1_ScanHex8uNumberNoPrefix(const unsigned char **str, byte *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanHex8uNumberNoPrefix (component Utility)
**     Description :
**         Scans a hexadecimal 8bit number, without 0x
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - String to scan, starting with 0x. It
**                           returns as well until where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void UTIL1_strcatNum32sDotValue100(byte *dst, size_t dstSize, long num);
/*
** ===================================================================
**     Method      :  UTIL1_strcatNum32sDotValue100 (component Utility)
**     Description :
**         Appends a 32bit signed value to a buffer. The value is in
**         1/100 units.  For example for the value -13456 it will
**         append the string "-134.56"
**     Parameters  :
**         NAME            - DESCRIPTION
**       * dst             - Pointer to destination string
**         dstSize         - Size of the destination buffer (in
**                           bytes).
**         num             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/

byte UTIL1_ScanDecimal8sNumber(const unsigned char **str, signed char *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanDecimal8sNumber (component Utility)
**     Description :
**         Scans a decimal 8bit signed number
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - String to scan. It returns as well until
**                           where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_ScanDecimal16sNumber(const unsigned char **str, int16_t *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanDecimal16sNumber (component Utility)
**     Description :
**         Scans a decimal 16bit signed number
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - String to scan. It returns as well until
**                           where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte UTIL1_ScanDecimal32sNumber(const unsigned char **str, uint32_t *val);
/*
** ===================================================================
**     Method      :  UTIL1_ScanDecimal32sNumber (component Utility)
**     Description :
**         Scans a decimal 32bit signed number
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - string to scan. It returns as well until
**                           where it has scanned
**       * val             - Pointer to value
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

int16_t UTIL1_strFind(byte *str, byte *subStr);
/*
** ===================================================================
**     Method      :  UTIL1_strFind (component Utility)
**     Description :
**         Searches a substring inside a string and returns the
**         position.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * str             - Pointer to string which will be searched
**       * subStr          - Pointer to substring to search
**                           inside str
**     Returns     :
**         ---             - -1 if not found, otherwise the character
**                           index.
** ===================================================================
*/

/* END UTIL1. */

#endif
/* ifndef __UTIL1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
